type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/file-formats.data.yaml
  visible: false
  text: |-
    ---
    - - json
    - - xml
    - - yaml
  learner_created: false
- name: test/file-formats.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test file formats: JSON, YAML, XML.
    #
    ---
    - [start, "-type {0}"]
    - [contains, "?", "The program should asks the user for a favourite animal"]
    - [input, cat]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - [input, "1"]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The first game started
    #
    - - contains
      - Is it a cat?
      - The program should asks the user is it the cat
    - [input, no]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes
      - The program should ask a question to distinguishes a dog from a cat
    - [input, It can climbs tree]
    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, No]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, Yes]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The second game started
    #
    - - contains
      - Can it climbs tree?
      - The only question in the knowledge tree should be "Can it climbs tree?"
    - [input, Yes]
    - - contains
      - Is it a cat?
      - The program doesn't print the expected message
    - [input, No]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - - input
      - a lynx
    - - input
      - It is living in the forest
    - - contains
      - Is the statement correct for a lynx?
      - The program doesn't print the expected message
    - [input, yes]
    - [input, no]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*0.*Exit.*
      - The program should print the menu after the user leave the game
    - - input
      - "0"
    - - finish
      - The program should finish when user select 0. Exit

    - - file exists
      - "animals.{0}"
      - "The program should save knowledge tree to animals.{0} file."

    #
    # Start the program again and load the Knowledge Tree
    #
    - - start
      - "-type {0}"
    - - not contains
      - Which animal do you like most?
      - If knowledge base is exist the program should not asks the user for a favourite animal
    - - contains
      - Welcome to the animal
      - The program doesn't print the expected message
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - - input
      - "0"
    - - finish
      - The program should finish when user refuse the new game
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {
        final String[] script = new String[]{
                "file-formats",
                "menu"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) throws IOException {
            return new Scenario(script).check();
        }

    }
  learner_created: false
- name: test/menu.data.yaml
  visible: false
  text: |-
    ---
    #
    # Test case #1
    #
    - - cat
      - |
        no
        shark
        it is a mammal
        no
        yes

        yes
        no
        fox
        it is living in the forest
        yes
        yes

        yes
        no
        no
        dog
        it can climb trees
        no
        yes

        yes
        yes
        no
        wolf
        it has a long bushy tail
        no
        yes

        yes
        yes
        no
        no
        hare
        it is a shy animal
        yes
        no

      #
      # 2. List of all animals
      #
      - "(?si).*cat.*dog.*hare.*shark.*wolf.*"

      #
      # 3. Search for an animal
      #
      - wolf
      - "(?si).*is a mammal.*doesn't have a long bushy tail.*isn't a shy animal.*"

      #
      # Data for the Knowledge Tree statistics
      #
      - It is a mammal
      - "11"
      - "6"
      - "5"
      - "4"
      - "1"
      - "3"
  learner_created: false
- name: test/menu.script.yaml
  visible: false
  text: |
    ---
    - [start]
    - [input, "{0}"]  # Favourite animal
    - [input, "1"]    # Play the game
    - [input, ""]     # Press Enter
    - [input, "{1}"]  # Play and fill the knowledge tree
    #
    # After filling the tree, we can test all the menu items.
    #
    - - matches
      - "(?is).*1.*Play.*List.*Search.*Calc.*Print.*Exit.*"
      - The program should print the menu

    #
    # 2. List of all animals
    #
    - [input, "2"]
    - [matches, "{2}", The program should print a list of all animals in alphabetical order.]

    #
    # 3. Search for an animal
    #
    - [input, "3"]
    - [contains, "Enter the animal", The program should ask for an animals to search.]
    - [input, "{3}"]
    - [matches, "{4}", The program should print facts about the animal]

    #
    # 4. Knowledge Tree stats
    #
    - [input, "4"]
    - [contains, "The Knowledge Tree stats", The program should print title for statistics]
    - [matches, "(?is).*root node.*{5}.*", "The root node should be {5}"]
    - [matches, "(?is).*number of nodes[^\\\\R]*{6}.*", "The total number of nodes should be {6}"]
    - [matches, "(?is).*number of animals[^\\\\R]*{7}.*", "The total number of animals should be {7}"]
    - [matches, "(?is).*number of statements[^\\\\R]*{8}.*", "The total number of statements should be {8}"]
    - [matches, "(?is).*height of the tree[^\\\\R]*{9}.*", "The height of the tree should be {9}"]
    - [matches, "(?is).*minimum[^\\\\R]*{10}.*", "The minimum depth should be {10}"]
    - [matches, "(?is).*average[^\\\\R]*{11}.*", "The average depth should be {11}"]
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/Node.java
  visible: true
  text: |
    package animals;
    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class Node<T> {


        private String value;
        private Node<T> left;
        private Node<T> right;

        public Node() {
        }

        public Node(String value) {
            this.value = value;
        }

        public Node(String value, Node<T> left, Node<T> right) {
            this.value = value;
            this.left = left;
            this.right = right;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public Node<T> getLeft() {
            return left;
        }

        //json
        public void setLeft(Node<T> left) {
            this.left = left;
        }

        public Node<T> getRight() {
            return right;
        }

        //json
        public void setRight(Node<T> right) {
            this.right = right;
        }
        @JsonIgnore
        public boolean isLeaf() {
            return left == null && right == null;
        }






    }
  learner_created: true
- name: src/animals/Tree.java
  visible: true
  text: |
    package animals;

    public class Tree {
            private Node<String> root;
            private Node<String> current;

            public Tree(){
                root = null;
            }

        public Node<String> getRoot() {
            return root;
        }

        public void setRoot(Node<String> root) {
            this.root = root;
        }

        public void setRoot(String value) {
               root = new Node<>(value);
                this.root = root;
        }
        public Node<String> getCurrent() {
            return current;
        }

        public void setCurrent(Node<String> current) {
            this.current = current;
        }
    }
  learner_created: true
- name: src/animals/Communication.java
  visible: true
  text: |-
    package animals;

    import java.util.List;

    public class Communication {

        public static List<String> positiveInput = List.of("y","yes", "yes.", "yeah", "yep", "sure", "right", "affirmative",
                "correct", "indeed","you bet", "exactly", "you said it");

        public static List<String> negativeInput = List.of("n", "no", "no way", "nah", "nope", "negative",
                "i don't think so", "i dont think so", "yeah no");

        public static List<String> clarification = List.of("I'm not sure I caught you: was it yes or no?",
                "Funny, I still don't understand, is it yes or no?",
                "Oh, it's too complicated for me: just tell me yes or no.",
                "Could you please simply say yes or no?",
                "Oh, no, don't try to confuse me: say yes or no.");

        public static List<String> goodbye = List.of("Bye!", "Have a nice day!", "See you soon!");
    }
  learner_created: true
- name: src/animals/GuessingGame.java
  visible: true
  learner_created: true
- name: src/animals/Storage.java
  visible: true
  learner_created: true
- name: animals.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11083#comment
status: Failed
feedback:
  message: "Wrong answer in test #2\n\nThe average depth should be 3\nExpected matches:\
    \ &quot;(?is).*average[^\\\\R]*3.*&quot;\nActual data is: &quot;The Knowledge\
    \ Tree stats\n\n- root node                    - It is a mammal.\n- total number\
    \ of nodes        11\n- total number of animals      6\n- total number of statements\
    \   5\n- height of the tree           2147483647\n- minimum animal&#39;s depth\
    \       -2147483648\n- average animal&#39;s depth       2.4\n\n\nWelcome to the\
    \ animal expert system\n\n1. Play the guessing game\n2. List of all animals\n\
    3. Search for an animal\n4. Calculate statistics\n5. Print the Knowledge Tree\n\
    0. Exit&quot;.\n\nPlease find below the output of your program during this failed\
    \ test.\nNote that the &#39;&gt;&#39; character indicates the beginning of the\
    \ input line.\n\n---\n\nI want to learn about animals.\nWhich animal do you like\
    \ most?\n&gt; cat\n\nWelcome to the animal expert system\n\n1. Play the guessing\
    \ game\n2. List of all animals\n3. Search for an animal\n4. Calculate statistics\n\
    5. Print the Knowledge Tree\n0. Exit\n&gt; 1\nLet&#39;s play a game!\nPress enter\
    \ when you&#39;re ready.\nYou think of an animal, and I guess it.\n&gt; \nIs it\
    \ a cat?\n&gt; no\nI give up. What animal do you have in mind?\n&gt; shark\nSpecify\
    \ a fact that distinguishes a cat from a shark.\nThe sentence should satisfy one\
    \ of the following templates:\n- It can ...\n- It has ...\n- It is a/an ...\n\
    &gt; it is a mammal\nSpecify a fact that distinguishes a cat from a shark.\nThe\
    \ sentence should satisfy one of the following templates:\n- It can ...\n- It\
    \ has ...\n- It is a/an ...\nIs the statement correct for a shark?\n&gt; no\n\
    I learned the following facts about animals:\n- The shark isn&#39;t a mammal.\n\
    - The cat is a mammal.\nI can distinguish these animals by asking the question:\n\
    - Is it a mammal?\n\nWould you like to play again?\n&gt; yes\nYou think of an\
    \ animal, and I guess it.\npress enter\n&gt; \n- Is it a mammal?\n&gt; yes\nIs\
    \ it a cat?\nI win!1\n&gt; no\nI give up. What animal do you have in mind?\n&gt;\
    \ fox\nSpecify a fact that distinguishes a fox from a cat.\nThe sentence should\
    \ satisfy one of the following templates:\n- It can ...\n- It has ...\n- It is\
    \ a/an ...\n&gt; it is living in the forest\nIs the statement correct for a fox?\n\
    &gt; yes\nwould you like to play again\n&gt; yes\nYou think of an animal, and\
    \ I guess it.\npress enter\n&gt; \n- Is it a mammal?\n&gt; yes\n- Is it living\
    \ in the forest?\n&gt; no\nIs it a cat?\nI win!1\n&gt; no\nI give up. What animal\
    \ do you have in mind?\n&gt; dog\nSpecify a fact that distinguishes a dog from\
    \ a cat.\nThe sentence should satisfy one of the following templates:\n- It can\
    \ ...\n- It has ...\n- It is a/an ...\n&gt; it can climb trees\nIs the statement\
    \ correct for a dog?\n&gt; no\nwould you like to play again\n&gt; yes\nYou think\
    \ of an animal, and I guess it.\npress enter\n&gt; \n- Is it a mammal?\n&gt; yes\n\
    - Is it living in the forest?\n&gt; yes\nIs it a fox?\nI win!1\n&gt; no\nI give\
    \ up. What animal do you have in mind?\n&gt; wolf\nSpecify a fact that distinguishes\
    \ a wolf from a fox.\nThe sentence should satisfy one of the following templates:\n\
    - It can ...\n- It has ...\n- It is a/an ...\n&gt; it has a long bushy tail\n\
    Is the statement correct for a wolf?\n&gt; no\nwould you like to play again\n\
    &gt; yes\nYou think of an animal, and I guess it.\npress enter\n&gt; \n- Is it\
    \ a mammal?\n&gt; yes\n- Is it living in the forest?\n&gt; yes\n- Does it have\
    \ a long bushy tail?\n&gt; no\nIs it a wolf?\nI win!1\n&gt; no\nI give up. What\
    \ animal do you have in mind?\n&gt; hare\nSpecify a fact that distinguishes a\
    \ hare from a wolf.\nThe sentence should satisfy one of the following templates:\n\
    - It can ...\n- It has ...\n- It is a/an ...\n&gt; it is a shy animal\nIs the\
    \ statement correct for a hare?\n&gt; yes\nwould you like to play again\n&gt;\
    \ no\n\nWelcome to the animal expert system\n\n1. Play the guessing game\n2. List\
    \ of all animals\n3. Search for an animal\n4. Calculate statistics\n5. Print the\
    \ Knowledge Tree\n0. Exit\n&gt; 2\nHere are the animals I know:\ncat\ndog\nfox\n\
    hare\nshark\nwolf\n\nWelcome to the animal expert system\n\n1. Play the guessing\
    \ game\n2. List of all animals\n3. Search for an animal\n4. Calculate statistics\n\
    5. Print the Knowledge Tree\n0. Exit\n&gt; 3\nEnter the animal:\n&gt; wolf\n-\
    \ It is a mammal.\n- It is living in the forest.\n- It doesn&#39;t have a long\
    \ bushy tail.\n- It isn&#39;t a shy animal.\n\nWelcome to the animal expert system\n\
    \n1. Play the guessing game\n2. List of all animals\n3. Search for an animal\n\
    4. Calculate statistics\n5. Print the Knowledge Tree\n0. Exit\n&gt; 4\nThe Knowledge\
    \ Tree stats\n\n- root node                    - It is a mammal.\n- total number\
    \ of nodes        11\n- total number of animals      6\n- total number of statements\
    \   5\n- height of the tree           2147483647\n- minimum animal&#39;s depth\
    \       -2147483648\n- average animal&#39;s depth       2.4\n\n\nWelcome to the\
    \ animal expert system\n\n1. Play the guessing game\n2. List of all animals\n\
    3. Search for an animal\n4. Calculate statistics\n5. Print the Knowledge Tree\n\
    0. Exit"
  time: "Thu, 02 Mar 2023 00:12:42 UTC"
record: 5
